def generate(n, x):
  # To generate cylic sub-groups using the generator
  # [d] in the subgroup <[x]> of Z_n.
  group = []
  
  curr = x%n # curr is always mod n
  while True:
    curr = (curr+x)%n # next cylic element
    if curr in group:
      # reached cycle
      break

    group.append(curr) 
  return group

def order(n, x):
  # To calculate order of subgroup of (Z_n, +)
  # generated by [x]
  order = 1
  curr = x%n # curr is always mod n
  while True:
    if curr == 0:
      # found cycle 
      return order
    curr = (curr+x)%n # next cylic element
    order += 1




if __name__ == "__main__":
  n=9
  x=28
  group = generate(n, x)
  group.sort()
  print("Cyclic SubGroup: ")
  print(group,'\n')

  if 0 in group:
    group.remove(0)

  print("Smallest Generator [d]: ")
  print(f'[{min(group)}]\n')

  print("Order of (Z_n, +) generated by [x]")
  print(order(n, x))